{"version":3,"sources":["Navbar.js","TextForm.js","Alert.js","App.js","index.js"],"names":["Navbar","props","className","mode","href","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","textCheck","split","filter","elem","length","join","numOfWords","rows","value","onChange","e","target","console","log","upText","toUpperCase","displayAlert","loText","toLowerCase","copyText","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","Alert","capitalize","word","lower","charAt","slice","style","height","alert","alertType","role","alertMsg","App","setMode","setAlert","msg","setTimeout","body","backgroundColor","ReactDOM","render"],"mappings":"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","file":"static/js/main.dbe44527.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">TextAnalyzer</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">About Us</a>\r\n        </li>\r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='dark'?'light':'dark'} mx-2`}>\r\n         <input className=\"form-check-input\" type=\"checkbox\" id=\"mode\" onClick={props.toggleMode}/>\r\n         <label className=\"form-check-label\" htmlFor=\"mode\">{props.mode==='dark'?'Dark Mode Enabled':'Enabele Dark Mode'}</label>\r\n      </div>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState } from \"react\";\r\n\r\nconst TextForm = (props) => {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  let textCheck=text.split(/\\s+/).filter((elem)=>(elem.length!==0)).join(' ');\r\n  let numOfWords=text.split(/\\s+/).filter((elem) => elem.length !== 0).length;\r\n  // console.log(textCheck)\r\n  const toUpper = (e) => {\r\n    console.log(text.length)\r\n    // if user enter white space or not enter any text\r\n    if (textCheck) {\r\n      let upText = text.toUpperCase();\r\n      setText(upText);\r\n      props.displayAlert('Converted to uppercase','success')\r\n    } else {\r\n      props.displayAlert('Enter some text to convert in uppercase') \r\n    }\r\n  };\r\n  \r\n  const toLpper = (e) => {\r\n    if (textCheck) {\r\n      const loText = text.toLowerCase();\r\n      setText(loText);\r\n      props.displayAlert('Converted to uppercase','success')\r\n    } else {\r\n      props.displayAlert('Enter some text to convert in lowercase')\r\n    }\r\n  };\r\n  const handleCopy = () => {\r\n    if (textCheck) {\r\n      let copyText = document.getElementById(\"myTextArea\");\r\n      // alert(\"copied text is: \" + \" \" + copyText.value);\r\n      copyText.select();\r\n      navigator.clipboard.writeText(copyText.value);\r\n      document.getSelection().removeAllRanges();\r\n      props.displayAlert('Text is copied to clipboard','success')\r\n    } else {\r\n      props.displayAlert('Nothing to copy')\r\n    }\r\n  };\r\n  const RemoveExtraSpces=() => {\r\n    if (text.split(/\\s+/).filter((elem)=>(elem.length!==0)).join(' ')) {\r\n      setText(text.split(/\\s+/).filter((elem)=>{\r\n        // console.log(elem.length,elem)\r\n      return elem.length!==0}).join(' '))\r\n      props.displayAlert('Extra spaces are removed','success')\r\n    } else {\r\n      props.displayAlert('Enter some text to perform this task') \r\n    }\r\n  }\r\n  const Clear=() => {\r\n    if (textCheck) {\r\n      setText('')\r\n      props.displayAlert('Text area is cleared','success')\r\n    } else {\r\n      props.displayAlert('Text area is already clean') \r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"container center my-3\">\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"myTextArea\" className=\"form-label\">\r\n            <h3 className={`text ${props.mode==='light'?'text-dark':'text-light'}`}>Enter text below to analyze </h3>\r\n          </label>\r\n          <textarea\r\n            className={`form-control ${props.mode==='light'?'text-dark bg-light':'bg-dark bg-opacity-50 text-light'}`}\r\n            id=\"myTextArea\"\r\n            rows=\"6\"\r\n            value={text}\r\n            onChange={(e) => {\r\n              setText(e.target.value);\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-dark mx-0 my-0\" onClick={toUpper}>\r\n          ToUppercase\r\n        </button>\r\n        <button className=\"btn btn-dark mx-2 my-1\" onClick={toLpper}>\r\n          ToLowercase\r\n        </button>\r\n        <button className=\"btn btn-dark mx-2 my-1\" onClick={handleCopy}>\r\n          Copy\r\n        </button>\r\n        <button className=\"btn btn-dark mx-2 my-1\" onClick={RemoveExtraSpces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className=\"btn btn-dark mx-2 my-1\" onClick={Clear}>\r\n            Clear\r\n        </button>\r\n\r\n      </div>\r\n      <div className={`text container ${props.mode==='light'?'text-dark':'text-light'}`}>\r\n        <h1>Your text summary</h1>\r\n        <p>\r\n          {text.length} chars with WHITE SPACES {\",\"}\r\n          {/* here regex is used for seperator for matching white space ,newline ,tab etc */}\r\n          {text.split(/\\s+/).join('').length} chars without WHITE SPACES and{\" \"}\r\n          {numOfWords} words{\" \"}\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          {(1 / 125) *\r\n            numOfWords}{\" \"}\r\n          Minutes to read{\" \"}\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text?text:'Enter text above to preview'}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextForm;\r\n","import React from \"react\";\r\n\r\nconst Alert = (props) => {\r\n    // capitalize type \r\n   const capitalize=(word) => {\r\n       let lower=word.toLowerCase()\r\n       return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n   }    \r\n  return (\r\n    <>\r\n    <div style={{height:'50px'}}>\r\n      {props.alert && (<div className={`alert alert-${props.alert.alertType}  alert-dismissible fade show`}  role=\"alert\">\r\n        <strong>{capitalize(props.alert.alertType)==='Danger'?'Alert':capitalize(props.alert.alertType)}!</strong>{\"     \"}\r\n        {props.alert.alertMsg}\r\n      </div>)}\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\r\n// import { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Navbar from \"./Navbar.js\";\r\nimport TextForm from \"./TextForm.js\";\r\nimport About from \"./About.js\";\r\nimport Alert from \"./Alert.js\";\r\n\r\nconst App = () => {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  \r\n  const displayAlert = (msg, type='danger') => {\r\n    setAlert({\r\n      alertMsg:msg,\r\n      alertType:type\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null)\r\n      \r\n    }, 3000);\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#033742\";\r\n      displayAlert('Dark Mode is Enabled','success')\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Navbar mode={mode} toggleMode={toggleMode} />\r\n      <Alert alert={alert} displayAlert={displayAlert} />\r\n      <TextForm mode={mode} displayAlert={displayAlert} />\r\n      {/* <About /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\n// import { BrowserRouter } from \"react-router-dom\";\n\n\nconsole.log(\"react\");\nReactDOM.render(\n    <>\n      <App/>\n  </>,\ndocument.getElementById(\"root\"))\n"],"sourceRoot":""}